name: Terraform
on:
  pull_request:
    
jobs:
  setup:
    runs-on: ubuntu-20.04
    outputs:
      stacks: ${{ steps.stacks.outputs.stacks }}
    steps:
    - uses: actions/checkout@v3
      name: Checkout source code
    # - uses: hashicorp/setup-terraform@v3
    # - name: terraform init
    #   run: terraform init
    # - name: terraform apply
    #   run: terraform apply -auto-approve
    #   env:
    #     TF_VAR_token: ${{ secrets.GH_TOKEN }}
    #     TF_VAR_org: ${{ secrets.GH_ORG }}
    - name: Setup Atmos
      uses: cloudposse/github-action-setup-atmos@v2
    - name: list stacks
      id: stacks
      run: |
        stacks=$(ls stacks/projects | cut -f1 -d "." | jq -R -s -c 'split("\n")[:-1]')
        # ToDo: Checken warum das nicht klappt
        #stacks=$(atmos list stacks  | jq -R -s -c 'split("\n")[:-1]')
        echo "stacks=$(jq -cn --argjson stack "$stacks" '{target: $stack}')" >> $GITHUB_OUTPUT
  setup-env:
    needs: setup
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.stacks) }}
    steps:
    - name: setup envs
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: | 
        gh api --method PUT -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/DominikSchorn/atmos-test/environments/${{matrix.target}}
        
  plan:
    needs: setup
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.stacks) }}
    steps:
    - uses: actions/checkout@v3
      name: Checkout source code
    - name: Setup Atmos
      uses: cloudposse/github-action-setup-atmos@v2
    - uses: hashicorp/setup-terraform@v3
    - name: Validate stack
      run: atmos validate component test -s projects/${{matrix.target}}
    - name: Install tfcmt
      uses: jaxxstorm/action-install-gh-release@v1.11.0
      with:
        repo: suzuki-shunsuke/tfcmt
        tag: v4.9.0
    - name: Create markdown for comment
      run: echo "# Plan for projects/${{matrix.target}}" > output.md
    - name: Plan
      run: tfcmt --output output.md plan -- atmos terraform plan test --stack projects/${{matrix.target}} -out=plan
    - name: Add comment to pr
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const fs = require('fs')
          const result_file = fs.readFileSync('output.md', 'utf8')
          const output = `
            ${result_file}
          `
          const comment = await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
  apply:
    needs:
    - setup
    - plan
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.stacks) }}
    environment: ${{ matrix.target }}
    steps:
    - uses: actions/checkout@v3
      name: Checkout source code
    - name: Setup Atmos
      uses: cloudposse/github-action-setup-atmos@v2
    - uses: hashicorp/setup-terraform@v3
    - name: Validate stack
      run: atmos validate component test -s projects/${{matrix.target}}
    - uses: chrnorm/deployment-action@v2
      name: Create GitHub deployment
      id: deployment
      with:
        token: ${{ secrets.GH_TOKEN }}
        environment-url: http://my-app-url.com
        environment: ${{matrix.target}}
    # - name: Install tfcmt
    #   uses: jaxxstorm/action-install-gh-release@v1.11.0
    #   with:
    #     repo: suzuki-shunsuke/tfcmt
    #     tag: v4.9.0
    # - name: Create markdown for comment
    #   run: echo "# Plan for projects/${{matrix.target}}" > output.md
    # - name: Plan
    #   run: tfcmt --output output.md plan -- atmos terraform plan test --stack projects/${{matrix.target}} -out=plan
    # - name: Add comment to pr
    #   uses: actions/github-script@v7
    #   with:
    #     github-token: ${{ secrets.GH_TOKEN }}
    #     script: |
    #       const fs = require('fs')
    #       const result_file = fs.readFileSync('output.md', 'utf8')
    #       const output = `
    #         ${result_file}
    #       `
    #       const comment = await github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })
